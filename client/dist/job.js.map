{"version":3,"file":"job.js","sources":["../src/job.ts"],"sourcesContent":["import type { JobResponse } from \"../../types/job\";\nconst externalCategoryData: { [key: number]: string } = {\n  1: \"Corporate Accounting\",\n  2: \"Public Accounting\",\n  3: \"Finance\",\n  4: \"Commercial Lines Account Manager\",\n  5: \"Personal Lines Account Manager\",\n  6: \"Employee Benefits Account Manager\",\n  7: \"Underwriting\",\n  8: \"Commercial Casualty Claims\",\n  9: \"Complex/Specialty Claims\",\n  10: \"Commercial Property Claims\",\n  11: \"Personal Lines Claims\",\n  12: \"Workers' Compensation Claims\",\n  13: \"Corporate Legal\",\n  14: \"Technology\",\n  15: \"Risk Management\",\n  16: \"Reinsurance\",\n  17: \"Executive Search\",\n  18: \"Other\",\n};\nconst BASE_URL = \"https://prg-one.vercel.app\";\n\ndocument.addEventListener(\"DOMContentLoaded\", async () => {\n  const jobIdInput = document.querySelector<HTMLInputElement>(\n    \"[dev-target=job-id]\"\n  );\n  const jobNameInput = document.querySelector<HTMLInputElement>(\n    \"[dev-target=job-name]\"\n  );\n  const responseUserFirstNameInput = document.querySelector<HTMLInputElement>(\n    \"[dev-target=response-user-first-name]\"\n  );\n  const responseUserLastNameInput = document.querySelector<HTMLInputElement>(\n    \"[dev-target=response-user-last-name]\"\n  );\n  const jobTitle = document.querySelector<HTMLDivElement>(\"[dev-target=title]\");\n  const jobLastModified = document.querySelector<HTMLDivElement>(\n    \"[dev-target=last-modified]\"\n  );\n  const jobDescription = document.querySelector<HTMLDivElement>(\n    \"[dev-target=description]\"\n  );\n  const jobCustomText2 = document.querySelector<HTMLDivElement>(\n    \"[dev-target=custom-text-2]\"\n  );\n  const jobState = document.querySelector<HTMLDivElement>(\"[dev-target=state]\");\n  const jobWorkFromHome = document.querySelector<HTMLDivElement>(\n    \"[dev-target=isWorkFromHome]\"\n  );\n  const jobEmploymentType = document.querySelector<HTMLDivElement>(\n    \"[dev-target=employmentType]\"\n  );\n  const jobExternalCategoryID = document.querySelector<HTMLDivElement>(\n    \"[dev-target=externalCategoryID]\"\n  );\n  const jobLoader = document.querySelector<HTMLDivElement>(\n    `[dev-target=job-loader]`\n  );\n  const jobContentWrap = document.querySelector<HTMLDivElement>(\n    `[dev-target=content-wrap]`\n  );\n  const jobSlugId = new URLSearchParams(window.location.search).get(\"id\");\n\n  if (\n    !jobIdInput ||\n    !jobNameInput ||\n    !responseUserFirstNameInput ||\n    !responseUserLastNameInput ||\n    !jobTitle ||\n    !jobDescription ||\n    !jobCustomText2 ||\n    !jobState ||\n    !jobWorkFromHome ||\n    !jobEmploymentType ||\n    !jobLoader ||\n    !jobContentWrap ||\n    !jobLastModified ||\n    !jobExternalCategoryID\n  ) {\n    return console.error(\"Missing element\");\n  }\n  if (!jobSlugId) {\n    return console.error(\"Missing id\");\n  }\n\n  try {\n    const job = await getJob(Number(jobSlugId));\n    if (job.count === 1) {\n      initPage({\n        job,\n        jobCustomText2,\n        jobDescription,\n        jobEmploymentType,\n        jobExternalCategoryID,\n        jobIdInput,\n        jobNameInput,\n        responseUserFirstNameInput,\n        responseUserLastNameInput,\n        jobState,\n        jobTitle,\n        jobLastModified,\n        jobWorkFromHome,\n        jobLoader,\n        jobContentWrap,\n      });\n      console.log({ job });\n    } else {\n      console.log(\"no job\", job);\n      window.location.href = \"/404\";\n    }\n  } catch (error) {\n    console.error(\"Something went wrong\", error);\n  }\n\n  function initPage({\n    job,\n    jobCustomText2,\n    jobDescription,\n    jobEmploymentType,\n    jobExternalCategoryID,\n    jobIdInput,\n    jobNameInput,\n    responseUserFirstNameInput,\n    responseUserLastNameInput,\n    jobState,\n    jobTitle,\n    jobLastModified,\n    jobWorkFromHome,\n    jobLoader,\n    jobContentWrap,\n  }: {\n    job: JobResponse;\n    jobIdInput: HTMLInputElement;\n    jobNameInput: HTMLInputElement;\n    responseUserFirstNameInput: HTMLInputElement;\n    responseUserLastNameInput: HTMLInputElement;\n    jobTitle: HTMLDivElement;\n    jobLastModified: HTMLDivElement;\n    jobDescription: HTMLDivElement;\n    jobCustomText2: HTMLDivElement;\n    jobState: HTMLDivElement;\n    jobWorkFromHome: HTMLDivElement;\n    jobEmploymentType: HTMLDivElement;\n    jobExternalCategoryID: HTMLDivElement;\n    jobLoader: HTMLDivElement;\n    jobContentWrap: HTMLDivElement;\n  }) {\n    const category = getDisplayValueById(job.data[0].externalCategoryID);\n    const title = job.data[0].title;\n    const customText = job.data[0].customText2;\n    const state = job.data[0].address.state;\n    const employmentType = job.data[0].employmentType;\n    if (!state && !customText)\n      jobCustomText2.parentElement?.parentElement?.setAttribute(\n        \"dev-hide\",\n        \"true\"\n      );\n    if (!category)\n      jobExternalCategoryID.parentElement?.setAttribute(\"dev-hide\", \"true\");\n    jobIdInput.value = job.data[0].id.toString();\n    jobNameInput.value = title;\n    responseUserFirstNameInput.value = job.data[0].responseUser.firstName;\n    responseUserLastNameInput.value = job.data[0].responseUser.lastName;\n    jobTitle.textContent = title;\n    jobLastModified.textContent = formatTimestamp(job.data[0].dateLastModified);\n    jobDescription.innerHTML = job.data[0].publicDescription;\n    jobCustomText2.textContent = customText ?? \"\";\n    jobState.textContent = state ? `${customText ? \"/\" : \"\"} ${state}` : \"\";\n    jobWorkFromHome.innerText = job.data[0].onSite;\n    jobEmploymentType.textContent = employmentType;\n    jobExternalCategoryID.innerText = category ?? \"\";\n    jobLoader.setAttribute(\"dev-hide\", \"true\");\n    jobContentWrap.setAttribute(\"dev-hide\", \"false\");\n  }\n\n  function formatTimestamp(timestamp: string | number): string {\n    const date = new Date(timestamp);\n    return date.toLocaleDateString(\"en-US\", {\n      year: \"numeric\",\n      month: \"long\",\n      day: \"numeric\",\n    });\n  }\n\n  async function getJob(id: number) {\n    try {\n      const response = await fetch(`${BASE_URL}/api/jobs/${id}`);\n      if (!response.ok) {\n        throw new Error(\"Failed to fetch job\");\n      }\n      const job: JobResponse = await response.json();\n      return job;\n    } catch (error) {\n      console.error(\"Error fetching job:\", error);\n      throw error;\n    }\n  }\n  function getDisplayValueById(id: number | null): string | null {\n    return id ? externalCategoryData[id] : null;\n  }\n});\n"],"names":["externalCategoryData","BASE_URL","jobIdInput","jobNameInput","responseUserFirstNameInput","responseUserLastNameInput","jobTitle","jobLastModified","jobDescription","jobCustomText2","jobState","jobWorkFromHome","jobEmploymentType","jobExternalCategoryID","jobLoader","jobContentWrap","jobSlugId","job","getJob","initPage","error","_a","_b","_c","category","getDisplayValueById","title","customText","state","employmentType","formatTimestamp","timestamp","id","response"],"mappings":"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"}